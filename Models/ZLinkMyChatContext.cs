// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Proxies;

namespace MyChatApi.Models;

public partial class ZLinkMyChatContext : DbContext
{
    public ZLinkMyChatContext(DbContextOptions<ZLinkMyChatContext> options)
        : base(options)
    {
        
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder
            .UseLazyLoadingProxies();
    }

    public virtual DbSet<OneToOneConversation> OneToOneConversations { get; set; }

    public virtual DbSet<OneToOneMessage> OneToOneMessages { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<OneToOneConversation>(entity =>
        {
            entity.ToTable("OneToOneConversation");

            entity.Property(e => e.Id).HasMaxLength(50);
            entity.Property(e => e.LastMessagedOn).HasColumnType("datetime");
            entity.Property(e => e.RecieverId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SenderId)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Reciever).WithMany(p => p.OneToOneConversationRecievers)
                .HasForeignKey(d => d.RecieverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OneToOneConversation_User_Reciever");

            entity.HasOne(d => d.Sender).WithMany(p => p.OneToOneConversationSenders)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OneToOneConversation_User_Sender");
        });

        modelBuilder.Entity<OneToOneMessage>(entity =>
        {
            entity.ToTable("OneToOneMessage");

            entity.Property(e => e.Id).HasMaxLength(50);
            entity.Property(e => e.ConversationId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Message).IsRequired();
            entity.Property(e => e.SendDateTime).HasColumnType("datetime");
            entity.Property(e => e.SenderId)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Conversation).WithMany(p => p.OneToOneMessages)
                .HasForeignKey(d => d.ConversationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OneToOneMessage_OneToOneConversation1");

            entity.HasOne(d => d.Sender).WithMany(p => p.OneToOneMessages)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OneToOneMessage_OneToOneConversation");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "UK_User").IsUnique();

            entity.Property(e => e.Id).HasMaxLength(50);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password).IsRequired();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}